@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use '~@rocket.chat/fuselage-tokens/colors.scss' as token-colors;

$-map-type-to-prefix: (
  neutral: 'n',
  primary: 'b',
  info: 'b',
  success: 'g',
  warning: 'y',
  danger: 'r',
  red: 'r',
  orange: 'o',
  yellow: 'y',
  green: 'g',
  blue: 'b',
  purple: 'p',
);

@function _get-palette-color($type, $grade, $alpha) {
  @if not ($grade % 100 == 0 and $grade / 100 >= 1 and $grade / 100 <= 9) {
    @error 'invalid color grade';
  }

  @if not ($alpha == null or ($alpha >= 0 and $alpha <= 1)) {
    @error 'invalid color alpha';
  }

  $prefix: map.get($-map-type-to-prefix, $type);
  @if not $prefix {
    @error 'invalid color type';
  }

  $base-color: map.get(token-colors.$colors, #{ $prefix }#{ $grade });

  @if not $base-color {
    @error 'invalid color reference';
  }

  @if ($alpha != null) {
    @return (
      --rcx-color-#{ $type }-#{ $grade }-#{ $alpha * 100 },
      color.change($base-color, $alpha: $alpha),
    );
  }

  @return (--rcx-color-#{ $type }-#{ $grade }, $base-color);
}

@function _refer-palette-color($type, $grade, $alpha: null) {
  $pair: _get-palette-color($type, $grade, $alpha);
  @return var(list.nth($pair, 1), list.nth($pair, 2));
}

@function neutral($grade, $alpha: null) {
  @return _refer-palette-color(neutral, $grade, $alpha);
}

@function primary($grade, $alpha: null) {
  @return _refer-palette-color(primary, $grade, $alpha);
}

@function info($grade, $alpha: null) {
  @return _refer-palette-color(info, $grade, $alpha);
}

@function success($grade, $alpha: null) {
  @return _refer-palette-color(success, $grade, $alpha);
}

@function warning($grade, $alpha: null) {
  @return _refer-palette-color(warning, $grade, $alpha);
}

@function danger($grade, $alpha: null) {
  @return _refer-palette-color(danger, $grade, $alpha);
}

@function red($grade, $alpha: null) {
  @return _refer-palette-color('red', $grade, $alpha);
}

@function orange($grade, $alpha: null) {
  @return _refer-palette-color('orange', $grade, $alpha);
}

@function yellow($grade, $alpha: null) {
  @return _refer-palette-color('yellow', $grade, $alpha);
}

@function green($grade, $alpha: null) {
  @return _refer-palette-color('green', $grade, $alpha);
}

@function blue($grade, $alpha: null) {
  @return _refer-palette-color('blue', $grade, $alpha);
}

@function purple($grade, $alpha: null) {
  @return _refer-palette-color('purple', $grade, $alpha);
}

@function surface() {
  @return var(--rcx-color-surface, white);
}

$-foreground-colors: (
  default: map.get(token-colors.$colors, n800),
  info: map.get(token-colors.$colors, n700),
  hint: map.get(token-colors.$colors, n600),
  disabled: map.get(token-colors.$colors, n400),
  alternative: white,
  primary: map.get(token-colors.$colors, b500),
  success: map.get(token-colors.$colors, g500),
  danger: map.get(token-colors.$colors, r500),
  warning: map.get(token-colors.$colors, y700),
  link: map.get(token-colors.$colors, b500),
  visited-link: map.get(token-colors.$colors, p500),
  active-link: map.get(token-colors.$colors, r500),
);

@function _get-foreground-color($type) {
  @if not map.has-key($-foreground-colors, $type) {
    @error 'invalid foreground type';
  }

  $color: map.get($-foreground-colors, $type);

  @return (--rcx-color-foreground-#{ $type }, $color);
}

@function foreground($type) {
  $pair: _get-foreground-color($type);
  @return var(list.nth($pair, 1), list.nth($pair, 2));
}

$foreground-types: map-keys($-foreground-colors);
